0x00: nop, no operation

0x01: add, add two registers
0x02: sub, subtract two registers
0x03: mul, multiply two registers
0x04: div, divide two registers
0x05: mod, modulo two registers

0x06: inc, increment a register
0x07: dec, decrement a register

0x08: and, bitwise and two registers
0x09: or, bitwise or two registers
0x0A: xor, bitwise xor two registers
0x0B: not, bitwise not a register

0x0C: shl, shift left a register
0x0D: shr, shift right a register

-- Movement --
0x10: mov, move a value into a register
0x11: mov, move a register into another register
0x12: mov, move a regoister into memory
0x13: mov, move a value from memory into a register

-- Branching --
##WARNING##: These instructions will be followed by 01 (immediate) or 02 (register) and then the value or register
0x20: call, call a memory address
0x21: ret, return from a call
0x22: jmp, jump to a memory address
0x23: je, jump if equal
0x24: jne, jump if not equal
0x25: jg, jump if greater
0x26: jge, jump if greater or equal
0x27: jl, jump if less
0x28: jle, jump if less or equal

-- Misc --
0x30: cmp, compare two registers
0x31: cmp, compare a register and a value

-- Stack --
0x40: push, push a register onto the stack
0x41: pop, pop off the stack into a register
0x42: pushf, push the flags onto the stack
0x43: popf, pop the flags off the stack
0x44: pusha, push all registers onto the stack
0x45: popa, pop all registers off the stack

0xFF: hlt, halt the CPU